name: Deploy Backend to Azure App Service

on:
  # Triggers the workflow on push events to the 'main' branch
  push:
    branches:
      - main
    paths:
      - 'promed_api_production/**' # Only run if backend code changes
      - '.github/workflows/main.yml'

# Environment variables common to all jobs
env:
  AZURE_WEBAPP_NAME: app-promed-backend-prod-dev
  AZURE_CR_NAME: promedhealthdashboard
  IMAGE_NAME: backend
  IMAGE_TAG: latest
  BACKEND_PATH: promed_api_production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Create the corrected entrypoint.sh file in the correct sub-directory ---
      - name: Create Entrypoint Script
        run: |
          # Use the directory path from the env variable
          ENTRYPOINT_PATH="${{ env.BACKEND_PATH }}/entrypoint.sh"
          echo "Creating corrected entrypoint script at: $ENTRYPOINT_PATH"

          # Create the file with correct Unix (LF) line endings
          cat > "$ENTRYPOINT_PATH" << 'EOF'
#!/bin/sh

echo "Starting entrypoint script..."

# Wait for database to be ready
echo "Waiting for database to be ready..."
DB_HOST="${MYSQL_DB_HOST:-mysql-promedhealthplue-dev.mysql.database.azure.com}"
DB_PORT="${MYSQL_DB_PORT:-3306}"

# Wait for database connection
timeout=60
counter=0
while ! nc -z "$DB_HOST" "$DB_PORT"; do
  sleep 1
  counter=$((counter + 1))
  if [ $counter -ge $timeout ]; then
    echo "Database connection timeout after ${timeout} seconds"
    break
  fi
done

echo "Database connection available, running migrations..."

# Apply database migrations
python manage.py migrate --noinput

echo "Starting Gunicorn server..."

# Execute the main command
exec gunicorn --workers 4 --bind 0.0.0.0:8000 promed_backend_api.wsgi:application
EOF

          # Make it executable
          chmod +x "$ENTRYPOINT_PATH"
          echo "Entrypoint script created and made executable."
      
      # --- 1. Docker Build and Push to ACR ---
      
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.AZURE_CR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image to ACR
        run: |
          IMAGE_FULL_NAME="${{ env.AZURE_CR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          DOCKERFILE_PATH="${{ env.BACKEND_PATH }}/Dockerfile"
          
          # Build with the repository root as context (the .) and explicitly point to the Dockerfile
          docker build -t $IMAGE_FULL_NAME -f $DOCKERFILE_PATH .
          docker push $IMAGE_FULL_NAME

      # --- 2. Deploy to Azure App Service (Using Service Principal) ---
      
      - name: Azure Login for Deployment
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.AZURE_CR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Logout of Azure
        run: az logout