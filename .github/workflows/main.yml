name: Deploy Backend to Azure App Service

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '.github/workflows/main.yml'

env:
  AZURE_WEBAPP_NAME: app-promed-backend-prod-dev
  AZURE_CR_NAME: promedhealthdashboard
  IMAGE_NAME: backend
  AZURE_RESOURCE_GROUP: rg-promed-backend-prod-dev  # Update this to your actual resource group

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Log in to ACR
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.AZURE_CR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      # Build and Push Docker Image with BOTH latest and SHA tags
      - name: Build and Push Docker Image
        run: |
          # Create both image references
          IMAGE_LATEST="${{ env.AZURE_CR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
          TAG_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_SHA="${{ env.AZURE_CR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${TAG_SHA}"
          
          echo "=========================================="
          echo "Building Docker Image"
          echo "=========================================="
          echo "Latest tag: $IMAGE_LATEST"
          echo "SHA tag: $IMAGE_SHA"
          echo "=========================================="
          
          # Build with BOTH tags at once
          docker build \
            --platform linux/amd64 \
            -t "$IMAGE_LATEST" \
            -t "$IMAGE_SHA" \
            .
          
          echo "Pushing latest tag to ACR..."
          docker push "$IMAGE_LATEST"
          
          echo "Pushing SHA tag to ACR..."
          docker push "$IMAGE_SHA"
          
          echo "=========================================="
          echo "Push Complete!"
          echo "=========================================="
          
          # Use latest for deployment (more reliable)
          echo "IMAGE_TO_DEPLOY=$IMAGE_LATEST" >> $GITHUB_ENV

      # Azure Login
      - name: Azure Login for Deployment
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # Verify the image exists in ACR
      - name: Verify Image in ACR
        run: |
          echo "Verifying images in ACR..."
          az acr repository show-tags \
            --name ${{ env.AZURE_CR_NAME }} \
            --repository ${{ env.IMAGE_NAME }} \
            --orderby time_desc \
            --top 10 \
            --output table
      
      # Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.IMAGE_TO_DEPLOY }}
      
      # Wait and check deployment status
      - name: Verify Deployment
        run: |
          echo "Waiting 30 seconds for deployment to complete..."
          sleep 30
          
          echo "Checking application status..."
          az webapp show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "{name:name, state:state, defaultHostName:defaultHostName}" \
            --output table
          
          echo "Fetching recent application logs..."
          az webapp log download \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --log-file deployment-logs.zip
          
          echo "Deployment verification complete. Check logs in Azure Portal for detailed output."
      
      - name: Logout of Azure
        run: az logout
        if: always()